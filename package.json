{
  "private": true,
  "name": "css-in-js",
  "version": "1.0.0",
  "description": "Comparison of css-in-js solutions",
  "scripts": {
    "client": "NODE_ENV=development webpack-dev-server",
    "start": "concurrently --kill-others \"npm run client\" \"babel-node server.js\""
  },
  "license": "MIT",
  "dependencies": {
    "fela": "^1.0.3",
    "fela-plugin-fallback-value": "^1.0.3",
    "fela-plugin-prefixer": "^1.0.3",
    "fela-plugin-unit": "^1.0.3",
    "react": "^15.1.0",
    "react-dom": "^15.1.0",
    "react-fela": "^2.1.0"
  },
  "devDependencies": {
    "babel": "6.5.2",
    "babel-cli": "6.6.0",
    "babel-loader": "6.2.1",
    "babel-plugin-add-module-exports": "0.1.2",
    "babel-preset-es2015": "6.6.0",
    "babel-preset-react": "6.5.0",
    "babel-preset-stage-0": "6.5.0",
    "concurrently": "^2.1.0",
    "esformatter": "^0.9.0",
    "esformatter-braces": "^1.2.1",
    "esformatter-collapse-objects": "^0.5.1",
    "esformatter-dot-notation": "^1.3.1",
    "esformatter-jsx": "^4.1.2",
    "esformatter-literal-notation": "^1.0.1",
    "esformatter-parseint": "^1.0.3",
    "esformatter-quote-props": "^1.0.2",
    "esformatter-quotes": "^1.0.3",
    "esformatter-remove-trailing-commas": "^1.0.1",
    "esformatter-spaced-lined-comment": "^2.0.1",
    "esformatter-var-each": "^2.1.0",
    "eslint": "^2.10.2",
    "eslint-config-rackt": "^1.1.1",
    "express": "^4.14.0",
    "express-http-proxy": "^0.7.2",
    "webpack": "1.12.11",
    "webpack-dev-server": "1.14.1"
  },
  "babel": {
    "presets": [
      "es2015",
      "stage-0",
      "react"
    ],
    "plugins": [
      "add-module-exports"
    ]
  },
  "eslintConfig": {
    "extends": "eslint-config-rackt",
    "env": {
      "browser": true,
      "mocha": true,
      "node": true
    },
    "rules": {
      "eol-last": 0
    }
  },
  "esformatter": {
    "plugins": [
      "esformatter-jsx",
      "esformatter-quotes",
      "esformatter-literal-notation",
      "esformatter-parseint",
      "esformatter-spaced-lined-comment",
      "esformatter-var-each",
      "esformatter-braces",
      "esformatter-dot-notation",
      "esformatter-remove-trailing-commas",
      "esformatter-collapse-objects",
      "esformatter-quote-props"
    ],
    "quotes": {
      "type": "single"
    },
    "jsx": {
      "formatJSX": true,
      "attrsOnSameLineAsTag": true,
      "maxAttrsOnTag": 4,
      "firstAttributeOnSameLine": false,
      "alignWithFirstAttribute": false,
      "spaceInJSXExpressionContainers": "",
      "htmlOptions": {
        "brace_style": "collapse",
        "indent_char": " ",
        "indent_size": 2,
        "max_preserve_newlines": 4,
        "preserve_newlines": true,
        "wrap_line_length": 250
      }
    },
    "indent": {
      "value": "  ",
      "alignComments": true,
      "ArrayExpression": 1,
      "ArrowFunctionExpression": 1,
      "AssignmentExpression": 1,
      "AssignmentExpression.BinaryExpression": 1,
      "AssignmentExpression.LogicalExpression": 1,
      "AssignmentExpression.UnaryExpression": 1,
      "CallExpression": 1,
      "CallExpression.BinaryExpression": 1,
      "CallExpression.LogicalExpression": 1,
      "CallExpression.UnaryExpression": 1,
      "CatchClause": 1,
      "ConditionalExpression": 1,
      "CommentInsideEmptyBlock": 1,
      "ClassDeclaration": 1,
      "DoWhileStatement": 1,
      "ForInStatement": 1,
      "ForStatement": 1,
      "FunctionDeclaration": 1,
      "FunctionExpression": 1,
      "IfStatement": 1,
      "MemberExpression": 1,
      "MultipleVariableDeclaration": 1,
      "NewExpression": 1,
      "ObjectExpression": 1,
      "ObjectExpression.BinaryExpression": 1,
      "ObjectExpression.LogicalExpression": 1,
      "ObjectExpression.UnaryExpression": 1,
      "ParameterList": 1,
      "ReturnStatement": 1,
      "SwitchCase": 1,
      "SwitchStatement": 1,
      "TopLevelFunctionBlock": 1,
      "TryStatement": 1,
      "VariableDeclaration.BinaryExpression": 1,
      "VariableDeclaration.LogicalExpression": 1,
      "VariableDeclaration.UnaryExpression": 1,
      "WhileStatement": 1
    },
    "lineBreak": {
      "value": "\n",
      "before": {
        "AssignmentExpression": ">=1",
        "AssignmentOperator": 0,
        "ArrowFunctionExpressionArrow": 0,
        "ArrowFunctionExpressionOpeningBrace": 0,
        "ArrowFunctionExpressionClosingBrace": ">=1",
        "BlockStatement": 0,
        "BreakKeyword": ">=1",
        "CallExpression": -1,
        "CallExpressionOpeningParentheses": 0,
        "CallExpressionClosingParentheses": -1,
        "ClassDeclaration": ">=1",
        "ClassDeclarationOpeningBrace": 0,
        "ClassDeclarationClosingBrace": ">=1",
        "ConditionalExpression": ">=1",
        "CatchOpeningBrace": 0,
        "CatchClosingBrace": ">=1",
        "CatchKeyword": 0,
        "DeleteOperator": ">=1",
        "DoWhileStatement": ">=1",
        "DoWhileStatementOpeningBrace": 0,
        "DoWhileStatementClosingBrace": ">=1",
        "EndOfFile": -1,
        "EmptyStatement": -1,
        "FinallyKeyword": -1,
        "FinallyOpeningBrace": 0,
        "FinallyClosingBrace": ">=1",
        "ForInStatement": ">=1",
        "ForInStatementExpressionOpening": 0,
        "ForInStatementExpressionClosing": 0,
        "ForInStatementOpeningBrace": 0,
        "ForInStatementClosingBrace": ">=1",
        "ForStatement": ">=1",
        "ForStatementExpressionOpening": 0,
        "ForStatementExpressionClosing": "<2",
        "ForStatementOpeningBrace": 0,
        "ForStatementClosingBrace": ">=1",
        "FunctionExpression": -1,
        "FunctionExpressionOpeningBrace": 0,
        "FunctionExpressionClosingBrace": ">=1",
        "FunctionDeclaration": ">=1",
        "FunctionDeclarationOpeningBrace": 0,
        "FunctionDeclarationClosingBrace": ">=1",
        "IIFEClosingParentheses": 0,
        "IfStatement": ">=1",
        "IfStatementOpeningBrace": 0,
        "IfStatementClosingBrace": ">=1",
        "ElseIfStatement": 0,
        "ElseIfStatementOpeningBrace": 0,
        "ElseIfStatementClosingBrace": ">=1",
        "ElseStatement": 0,
        "ElseStatementOpeningBrace": 0,
        "ElseStatementClosingBrace": ">=1",
        "LogicalExpression": -1,
        "MethodDefinition": ">=1",
        "ObjectExpressionClosingBrace": ">=1",
        "ParameterDefault": 0,
        "Property": ">=1",
        "PropertyValue": 0,
        "ReturnStatement": -1,
        "SwitchOpeningBrace": 0,
        "SwitchClosingBrace": ">=1",
        "ThisExpression": -1,
        "ThrowStatement": ">=1",
        "TryKeyword": -1,
        "TryOpeningBrace": 0,
        "TryClosingBrace": ">=1",
        "VariableName": ">=1",
        "VariableValue": 0,
        "VariableDeclaration": ">=1",
        "VariableDeclarationWithoutInit": ">=1",
        "WhileStatement": ">=1",
        "WhileStatementOpeningBrace": 0,
        "WhileStatementClosingBrace": ">=1"
      },
      "after": {
        "AssignmentExpression": ">=1",
        "AssignmentOperator": 0,
        "ArrowFunctionExpressionArrow": 0,
        "ArrowFunctionExpressionOpeningBrace": ">=1",
        "ArrowFunctionExpressionClosingBrace": -1,
        "BlockStatement": 0,
        "BreakKeyword": -1,
        "CallExpression": -1,
        "CallExpressionOpeningParentheses": -1,
        "CallExpressionClosingParentheses": -1,
        "ClassDeclaration": ">=1",
        "ClassDeclarationOpeningBrace": ">=1",
        "ClassDeclarationClosingBrace": ">=1",
        "CatchOpeningBrace": ">=1",
        "CatchClosingBrace": ">=0",
        "CatchKeyword": 0,
        "ConditionalExpression": ">=1",
        "DeleteOperator": ">=1",
        "DoWhileStatement": ">=1",
        "DoWhileStatementOpeningBrace": ">=1",
        "DoWhileStatementClosingBrace": 0,
        "EmptyStatement": -1,
        "FinallyKeyword": -1,
        "FinallyOpeningBrace": ">=1",
        "FinallyClosingBrace": ">=1",
        "ForInStatement": ">=1",
        "ForInStatementExpressionOpening": "<2",
        "ForInStatementExpressionClosing": -1,
        "ForInStatementOpeningBrace": ">=1",
        "ForInStatementClosingBrace": ">=1",
        "ForStatement": ">=1",
        "ForStatementExpressionOpening": "<2",
        "ForStatementExpressionClosing": -1,
        "ForStatementOpeningBrace": ">=1",
        "ForStatementClosingBrace": ">=1",
        "FunctionExpression": ">=1",
        "FunctionExpressionOpeningBrace": ">=1",
        "FunctionExpressionClosingBrace": -1,
        "FunctionDeclaration": ">=1",
        "FunctionDeclarationOpeningBrace": ">=1",
        "FunctionDeclarationClosingBrace": ">=1",
        "IIFEOpeningParentheses": 0,
        "IfStatement": ">=1",
        "IfStatementOpeningBrace": ">=1",
        "IfStatementClosingBrace": ">=1",
        "ElseIfStatement": ">=1",
        "ElseIfStatementOpeningBrace": ">=1",
        "ElseIfStatementClosingBrace": ">=1",
        "ElseStatement": ">=1",
        "ElseStatementOpeningBrace": ">=1",
        "ElseStatementClosingBrace": ">=1",
        "LogicalExpression": -1,
        "MethodDefinition": ">=1",
        "ObjectExpressionOpeningBrace": ">=1",
        "ParameterDefault": 0,
        "Property": 0,
        "PropertyName": 0,
        "ReturnStatement": -1,
        "SwitchOpeningBrace": ">=1",
        "SwitchClosingBrace": ">=1",
        "ThisExpression": 0,
        "ThrowStatement": ">=1",
        "TryKeyword": -1,
        "TryOpeningBrace": ">=1",
        "TryClosingBrace": 0,
        "VariableDeclaration": ">=1",
        "WhileStatement": ">=1",
        "WhileStatementOpeningBrace": ">=1",
        "WhileStatementClosingBrace": ">=1"
      }
    },
    "whiteSpace": {
      "value": " ",
      "removeTrailing": 1,
      "before": {
        "ArrayExpressionOpening": 0,
        "ArrayExpressionClosing": 1,
        "ArrayExpressionComma": 0,
        "ArrayPatternOpening": 1,
        "ArrayPatternClosing": 1,
        "ArrayPatternComma": 0,
        "ArrowFunctionExpressionArrow": 1,
        "ArrowFunctionExpressionOpeningBrace": 1,
        "ArrowFunctionExpressionClosingBrace": 0,
        "ArgumentComma": 0,
        "ArgumentList": 0,
        "AssignmentOperator": 1,
        "BinaryExpression": 0,
        "BinaryExpressionOperator": 1,
        "BlockComment": 1,
        "CallExpression": -1,
        "CallExpressionOpeningParentheses": 0,
        "CallExpressionClosingParentheses": -1,
        "CatchParameterList": 0,
        "CatchOpeningBrace": 1,
        "CatchClosingBrace": 1,
        "CatchKeyword": 1,
        "CommaOperator": 0,
        "ClassDeclarationOpeningBrace": 1,
        "ClassDeclarationClosingBrace": 1,
        "ConditionalExpressionConsequent": 1,
        "ConditionalExpressionAlternate": 1,
        "DoWhileStatementOpeningBrace": 1,
        "DoWhileStatementClosingBrace": 1,
        "DoWhileStatementConditional": 1,
        "EmptyStatement": 0,
        "ExpressionClosingParentheses": 0,
        "FinallyKeyword": -1,
        "FinallyOpeningBrace": 1,
        "FinallyClosingBrace": 1,
        "ForInStatement": 1,
        "ForInStatementExpressionOpening": 1,
        "ForInStatementExpressionClosing": 0,
        "ForInStatementOpeningBrace": 1,
        "ForInStatementClosingBrace": 1,
        "ForStatement": 1,
        "ForStatementExpressionOpening": 1,
        "ForStatementExpressionClosing": 0,
        "ForStatementOpeningBrace": 1,
        "ForStatementClosingBrace": 1,
        "ForStatementSemicolon": 0,
        "FunctionDeclarationOpeningBrace": 1,
        "FunctionDeclarationClosingBrace": 1,
        "FunctionExpressionOpeningBrace": 1,
        "FunctionExpressionClosingBrace": 1,
        "FunctionName": 1,
        "IIFEClosingParentheses": 0,
        "IfStatementConditionalOpening": 1,
        "IfStatementConditionalClosing": 0,
        "IfStatementOpeningBrace": 1,
        "IfStatementClosingBrace": 1,
        "ElseStatementOpeningBrace": 1,
        "ElseStatementClosingBrace": 1,
        "ElseIfStatementOpeningBrace": 1,
        "ElseIfStatementClosingBrace": 1,
        "LineComment": 1,
        "LogicalExpressionOperator": 1,
        "MemberExpressionClosing": 0,
        "ObjectExpressionOpeningBrace": -1,
        "ObjectExpressionClosingBrace": 1,
        "ObjectPatternOpeningBrace": 1,
        "ObjectPatternClosingBrace": 1,
        "ObjectPatternComma": 0,
        "PropertyName": 1,
        "PropertyValue": 1,
        "ParameterComma": 0,
        "ParameterDefault": 1,
        "ParameterList": 0,
        "SwitchDiscriminantOpening": 1,
        "SwitchDiscriminantClosing": 0,
        "ThrowKeyword": 1,
        "TryKeyword": -1,
        "TryOpeningBrace": 1,
        "TryClosingBrace": 1,
        "UnaryExpressionOperator": 0,
        "VariableName": 1,
        "VariableValue": 1,
        "WhileStatementConditionalOpening": 1,
        "WhileStatementConditionalClosing": 0,
        "WhileStatementOpeningBrace": 1,
        "WhileStatementClosingBrace": 1
      },
      "after": {
        "ArrayExpressionOpening": 1,
        "ArrayExpressionClosing": 0,
        "ArrayExpressionComma": 1,
        "ArrayPatternOpening": 1,
        "ArrayPatternClosing": 0,
        "ArrayPatternComma": 1,
        "ArrowFunctionExpressionArrow": 1,
        "ArrowFunctionExpressionOpeningBrace": 0,
        "ArrowFunctionExpressionClosingBrace": 0,
        "ArgumentComma": 1,
        "ArgumentList": 0,
        "AssignmentOperator": 1,
        "BinaryExpression": 0,
        "BinaryExpressionOperator": 1,
        "BlockComment": 1,
        "CallExpression": -1,
        "CallExpressionOpeningParentheses": -1,
        "CallExpressionClosingParentheses": -1,
        "CatchParameterList": 0,
        "CatchOpeningBrace": 1,
        "CatchClosingBrace": 1,
        "CatchKeyword": 1,
        "ClassDeclarationOpeningBrace": 1,
        "ClassDeclarationClosingBrace": 1,
        "CommaOperator": 1,
        "ConditionalExpressionConsequent": 1,
        "ConditionalExpressionTest": 1,
        "DoWhileStatementOpeningBrace": 1,
        "DoWhileStatementClosingBrace": 1,
        "DoWhileStatementBody": 1,
        "EmptyStatement": 0,
        "ExpressionOpeningParentheses": 0,
        "FinallyKeyword": -1,
        "FinallyOpeningBrace": 1,
        "FinallyClosingBrace": 1,
        "ForInStatement": 1,
        "ForInStatementExpressionOpening": 0,
        "ForInStatementExpressionClosing": 1,
        "ForInStatementOpeningBrace": 1,
        "ForInStatementClosingBrace": 1,
        "ForStatement": 1,
        "ForStatementExpressionOpening": 0,
        "ForStatementExpressionClosing": 1,
        "ForStatementClosingBrace": 1,
        "ForStatementOpeningBrace": 1,
        "ForStatementSemicolon": 1,
        "FunctionReservedWord": 0,
        "FunctionName": 0,
        "FunctionExpressionOpeningBrace": 1,
        "FunctionExpressionClosingBrace": 0,
        "FunctionDeclarationOpeningBrace": 1,
        "FunctionDeclarationClosingBrace": 1,
        "IIFEOpeningParentheses": 0,
        "IfStatementConditionalOpening": 0,
        "IfStatementConditionalClosing": 1,
        "IfStatementOpeningBrace": 1,
        "IfStatementClosingBrace": 1,
        "ElseStatementOpeningBrace": 1,
        "ElseStatementClosingBrace": 1,
        "ElseIfStatementOpeningBrace": 1,
        "ElseIfStatementClosingBrace": 1,
        "MemberExpressionOpening": 0,
        "LogicalExpressionOperator": 1,
        "ObjectExpressionOpeningBrace": 1,
        "ObjectExpressionClosingBrace": 0,
        "ObjectPatternOpeningBrace": 1,
        "ObjectPatternClosingBrace": 0,
        "ObjectPatternComma": 1,
        "PropertyName": 0,
        "PropertyValue": 0,
        "ParameterComma": 1,
        "ParameterDefault": 1,
        "ParameterList": 0,
        "SwitchDiscriminantOpening": 0,
        "SwitchDiscriminantClosing": 1,
        "ThrowKeyword": 1,
        "TryKeyword": -1,
        "TryOpeningBrace": 1,
        "TryClosingBrace": 1,
        "UnaryExpressionOperator": 0,
        "VariableName": 1,
        "WhileStatementConditionalOpening": 0,
        "WhileStatementConditionalClosing": 1,
        "WhileStatementOpeningBrace": 1,
        "WhileStatementClosingBrace": 1
      }
    }
  }
}
